1)Structure members cannot be initialized with declaration. For example the following C program fails in compilation.
struct Point
{
   int x = 0;  // COMPILER ERROR:  cannot initialize members here
   int y = 0;  // COMPILER ERROR:  cannot initialize members here
}; 


2)
Structure members can be initialized using curly braces ‘{}’. For example, following is a valid initialization.
struct Point
{
   int x, y;
}; 
int main()
{
   // A valid initialization. member x gets value 0 and y
   // gets value 1.  The order of declaration is followed.
   struct Point p1 = {0, 1}; 
}

3)

What is designated Initialization?
Designated Initialization allows structure members to be initialized in any order. This feature has been added in C99 standard.

struct Point
{
   int x, y, z;
};
 
int main()
{
   // Examples of initializtion using designated initialization
   struct Point p1 = {.y = 0, .z = 1, .x = 2};
   struct Point p2 = {.x = 20};
 
   printf ("x = %d, y = %d, z = %d\n", p1.x, p1.y, p1.z);
   printf ("x = %d", p2.x);
   return 0;
}
Output:

x = 2, y = 0, z = 1
x = 20
This feature is not available in C++ and works only in C

4)

#include <stdio.h>
struct Ournode {
  char x, y, z;
};
 
int main() {
  struct Ournode p = {'1', '0', 'a' + 2};
  struct Ournode *q = &p;
  printf("%c, %c", *((char *)q + 1), *((char *)q + 2));  --> prints "0, c"
  return 0;
}

here Ournode is a sort of char array hence we can access the elements of p as *((char *)q + 1), 

struct Ournode {
  char x, y, z;
  int a,b,c;
};

int main() {
  struct Ournode p = {'1', '0', 'a' + 2,3,4};
  struct Ournode *q = &p;
  printf("%c, %c\n", *((char *)q + 1), *((char *)q + 2)); --> prints "0, c"
  printf("%d, %d\n", *((int *)q + 1), *((int *)q +2 )); --> prints "3, 4"
  return 0;
}

if we print *((int *)q + 0) , it prints garbage (or some adderss (dont know :p))