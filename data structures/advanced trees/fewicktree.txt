///introduction
// helps in finding the prefix sum of array e.g. sum from index 0 to 6, 0 to 4 etc;
//time to create Fenwick tree is o(n log n )
//space complexity --> o(n)
//query ---> o(log n)
//update---> o(log n)

///get parent-->
//  1. 2`s complement
//  2. AND it with original number
//  3. Subtract from original number
///get next-->
//  1. 2`s complement
//  2. AND it with original number
//  3. ADD to original number
///structure of tree-->
//1,2,4,8... are the child nodes of 0 as --> if we flip the rightmost 1 bit we get zero hence 0 is parent of 1,2,4,8,...
//similarly 2 is parent of 3 and so on;
//on node 0 nothing is stored
//for n elements of the array we have n+1 elements of Fenwick tree
///filling the tree->
//initially store 0 on all indexes of Fenwick tree array
//start from node 1 which stores the 0th index element; then get next node using above formula and add it to them as well .
//then move to index 1 of the array and add it to node 2 and add the same to the next nodes as well
//repeat the above procedure
///for updating the tree repeat the same procedure as filling the tree
///for query -->
//for sum from index 0 to index x,go to index x+1(in Fenwick array)add it to ans and find parent of x+1 and add it to ans,... carry  on until u find the root node i.e. index 0 of Fenwick array

/*            n  --> No. of elements present in input array.
    BITree[0..n] --> Array that represents Binary Indexed Tree.
    arr[0..n-1]  --> Input array for whic prefix sum is evaluated. */

// Returns sum of arr[0..index]. This function assumes
// that the array is preprocessed and partial sums of
// array elements are stored in BITree[].